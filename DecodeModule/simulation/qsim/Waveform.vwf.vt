// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2025 12:12:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decodeModule
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decodeModule_vlg_sample_tst(
	alu_result,
	clock,
	instruction,
	memory_data,
	MemToReg,
	RegDst,
	RegWrite,
	reset,
	sampler_tx
);
input [31:0] alu_result;
input  clock;
input [31:0] instruction;
input [31:0] memory_data;
input  MemToReg;
input  RegDst;
input  RegWrite;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(alu_result or clock or instruction or memory_data or MemToReg or RegDst or RegWrite or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decodeModule_vlg_check_tst (
	immediate,
	jump_addr,
	register_rd,
	register_rs,
	register_rt,
	sampler_rx
);
input [31:0] immediate;
input [31:0] jump_addr;
input [31:0] register_rd;
input [31:0] register_rs;
input [31:0] register_rt;
input sampler_rx;

reg [31:0] immediate_expected;
reg [31:0] jump_addr_expected;
reg [31:0] register_rd_expected;
reg [31:0] register_rs_expected;
reg [31:0] register_rt_expected;

reg [31:0] immediate_prev;
reg [31:0] jump_addr_prev;
reg [31:0] register_rd_prev;
reg [31:0] register_rs_prev;
reg [31:0] register_rt_prev;

reg [31:0] jump_addr_expected_prev;
reg [31:0] register_rd_expected_prev;
reg [31:0] register_rs_expected_prev;
reg [31:0] register_rt_expected_prev;

reg [31:0] last_jump_addr_exp;
reg [31:0] last_register_rd_exp;
reg [31:0] last_register_rs_exp;
reg [31:0] last_register_rt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	immediate_prev = immediate;
	jump_addr_prev = jump_addr;
	register_rd_prev = register_rd;
	register_rs_prev = register_rs;
	register_rt_prev = register_rt;
end

// update expected /o prevs

always @(trigger)
begin
	jump_addr_expected_prev = jump_addr_expected;
	register_rd_expected_prev = register_rd_expected;
	register_rs_expected_prev = register_rs_expected;
	register_rt_expected_prev = register_rt_expected;
end


// expected jump_addr[ 31 ]
initial
begin
	jump_addr_expected[31] = 1'bX;
end 
// expected jump_addr[ 30 ]
initial
begin
	jump_addr_expected[30] = 1'bX;
end 
// expected jump_addr[ 29 ]
initial
begin
	jump_addr_expected[29] = 1'bX;
end 
// expected jump_addr[ 28 ]
initial
begin
	jump_addr_expected[28] = 1'bX;
end 
// expected jump_addr[ 27 ]
initial
begin
	jump_addr_expected[27] = 1'bX;
end 
// expected jump_addr[ 26 ]
initial
begin
	jump_addr_expected[26] = 1'bX;
end 
// expected jump_addr[ 25 ]
initial
begin
	jump_addr_expected[25] = 1'bX;
end 
// expected jump_addr[ 24 ]
initial
begin
	jump_addr_expected[24] = 1'bX;
end 
// expected jump_addr[ 23 ]
initial
begin
	jump_addr_expected[23] = 1'bX;
end 
// expected jump_addr[ 22 ]
initial
begin
	jump_addr_expected[22] = 1'bX;
end 
// expected jump_addr[ 21 ]
initial
begin
	jump_addr_expected[21] = 1'bX;
end 
// expected jump_addr[ 20 ]
initial
begin
	jump_addr_expected[20] = 1'bX;
end 
// expected jump_addr[ 19 ]
initial
begin
	jump_addr_expected[19] = 1'bX;
end 
// expected jump_addr[ 18 ]
initial
begin
	jump_addr_expected[18] = 1'bX;
end 
// expected jump_addr[ 17 ]
initial
begin
	jump_addr_expected[17] = 1'bX;
end 
// expected jump_addr[ 16 ]
initial
begin
	jump_addr_expected[16] = 1'bX;
end 
// expected jump_addr[ 15 ]
initial
begin
	jump_addr_expected[15] = 1'bX;
end 
// expected jump_addr[ 14 ]
initial
begin
	jump_addr_expected[14] = 1'bX;
end 
// expected jump_addr[ 13 ]
initial
begin
	jump_addr_expected[13] = 1'bX;
end 
// expected jump_addr[ 12 ]
initial
begin
	jump_addr_expected[12] = 1'bX;
end 
// expected jump_addr[ 11 ]
initial
begin
	jump_addr_expected[11] = 1'bX;
end 
// expected jump_addr[ 10 ]
initial
begin
	jump_addr_expected[10] = 1'bX;
end 
// expected jump_addr[ 9 ]
initial
begin
	jump_addr_expected[9] = 1'bX;
end 
// expected jump_addr[ 8 ]
initial
begin
	jump_addr_expected[8] = 1'bX;
end 
// expected jump_addr[ 7 ]
initial
begin
	jump_addr_expected[7] = 1'bX;
end 
// expected jump_addr[ 6 ]
initial
begin
	jump_addr_expected[6] = 1'bX;
end 
// expected jump_addr[ 5 ]
initial
begin
	jump_addr_expected[5] = 1'bX;
end 
// expected jump_addr[ 4 ]
initial
begin
	jump_addr_expected[4] = 1'bX;
end 
// expected jump_addr[ 3 ]
initial
begin
	jump_addr_expected[3] = 1'bX;
end 
// expected jump_addr[ 2 ]
initial
begin
	jump_addr_expected[2] = 1'bX;
end 
// expected jump_addr[ 1 ]
initial
begin
	jump_addr_expected[1] = 1'bX;
end 
// expected jump_addr[ 0 ]
initial
begin
	jump_addr_expected[0] = 1'bX;
end 
// expected register_rd[ 31 ]
initial
begin
	register_rd_expected[31] = 1'bX;
end 
// expected register_rd[ 30 ]
initial
begin
	register_rd_expected[30] = 1'bX;
end 
// expected register_rd[ 29 ]
initial
begin
	register_rd_expected[29] = 1'bX;
end 
// expected register_rd[ 28 ]
initial
begin
	register_rd_expected[28] = 1'bX;
end 
// expected register_rd[ 27 ]
initial
begin
	register_rd_expected[27] = 1'bX;
end 
// expected register_rd[ 26 ]
initial
begin
	register_rd_expected[26] = 1'bX;
end 
// expected register_rd[ 25 ]
initial
begin
	register_rd_expected[25] = 1'bX;
end 
// expected register_rd[ 24 ]
initial
begin
	register_rd_expected[24] = 1'bX;
end 
// expected register_rd[ 23 ]
initial
begin
	register_rd_expected[23] = 1'bX;
end 
// expected register_rd[ 22 ]
initial
begin
	register_rd_expected[22] = 1'bX;
end 
// expected register_rd[ 21 ]
initial
begin
	register_rd_expected[21] = 1'bX;
end 
// expected register_rd[ 20 ]
initial
begin
	register_rd_expected[20] = 1'bX;
end 
// expected register_rd[ 19 ]
initial
begin
	register_rd_expected[19] = 1'bX;
end 
// expected register_rd[ 18 ]
initial
begin
	register_rd_expected[18] = 1'bX;
end 
// expected register_rd[ 17 ]
initial
begin
	register_rd_expected[17] = 1'bX;
end 
// expected register_rd[ 16 ]
initial
begin
	register_rd_expected[16] = 1'bX;
end 
// expected register_rd[ 15 ]
initial
begin
	register_rd_expected[15] = 1'bX;
end 
// expected register_rd[ 14 ]
initial
begin
	register_rd_expected[14] = 1'bX;
end 
// expected register_rd[ 13 ]
initial
begin
	register_rd_expected[13] = 1'bX;
end 
// expected register_rd[ 12 ]
initial
begin
	register_rd_expected[12] = 1'bX;
end 
// expected register_rd[ 11 ]
initial
begin
	register_rd_expected[11] = 1'bX;
end 
// expected register_rd[ 10 ]
initial
begin
	register_rd_expected[10] = 1'bX;
end 
// expected register_rd[ 9 ]
initial
begin
	register_rd_expected[9] = 1'bX;
end 
// expected register_rd[ 8 ]
initial
begin
	register_rd_expected[8] = 1'bX;
end 
// expected register_rd[ 7 ]
initial
begin
	register_rd_expected[7] = 1'bX;
end 
// expected register_rd[ 6 ]
initial
begin
	register_rd_expected[6] = 1'bX;
end 
// expected register_rd[ 5 ]
initial
begin
	register_rd_expected[5] = 1'bX;
end 
// expected register_rd[ 4 ]
initial
begin
	register_rd_expected[4] = 1'bX;
end 
// expected register_rd[ 3 ]
initial
begin
	register_rd_expected[3] = 1'bX;
end 
// expected register_rd[ 2 ]
initial
begin
	register_rd_expected[2] = 1'bX;
end 
// expected register_rd[ 1 ]
initial
begin
	register_rd_expected[1] = 1'bX;
end 
// expected register_rd[ 0 ]
initial
begin
	register_rd_expected[0] = 1'bX;
end 
// expected register_rs[ 31 ]
initial
begin
	register_rs_expected[31] = 1'bX;
end 
// expected register_rs[ 30 ]
initial
begin
	register_rs_expected[30] = 1'bX;
end 
// expected register_rs[ 29 ]
initial
begin
	register_rs_expected[29] = 1'bX;
end 
// expected register_rs[ 28 ]
initial
begin
	register_rs_expected[28] = 1'bX;
end 
// expected register_rs[ 27 ]
initial
begin
	register_rs_expected[27] = 1'bX;
end 
// expected register_rs[ 26 ]
initial
begin
	register_rs_expected[26] = 1'bX;
end 
// expected register_rs[ 25 ]
initial
begin
	register_rs_expected[25] = 1'bX;
end 
// expected register_rs[ 24 ]
initial
begin
	register_rs_expected[24] = 1'bX;
end 
// expected register_rs[ 23 ]
initial
begin
	register_rs_expected[23] = 1'bX;
end 
// expected register_rs[ 22 ]
initial
begin
	register_rs_expected[22] = 1'bX;
end 
// expected register_rs[ 21 ]
initial
begin
	register_rs_expected[21] = 1'bX;
end 
// expected register_rs[ 20 ]
initial
begin
	register_rs_expected[20] = 1'bX;
end 
// expected register_rs[ 19 ]
initial
begin
	register_rs_expected[19] = 1'bX;
end 
// expected register_rs[ 18 ]
initial
begin
	register_rs_expected[18] = 1'bX;
end 
// expected register_rs[ 17 ]
initial
begin
	register_rs_expected[17] = 1'bX;
end 
// expected register_rs[ 16 ]
initial
begin
	register_rs_expected[16] = 1'bX;
end 
// expected register_rs[ 15 ]
initial
begin
	register_rs_expected[15] = 1'bX;
end 
// expected register_rs[ 14 ]
initial
begin
	register_rs_expected[14] = 1'bX;
end 
// expected register_rs[ 13 ]
initial
begin
	register_rs_expected[13] = 1'bX;
end 
// expected register_rs[ 12 ]
initial
begin
	register_rs_expected[12] = 1'bX;
end 
// expected register_rs[ 11 ]
initial
begin
	register_rs_expected[11] = 1'bX;
end 
// expected register_rs[ 10 ]
initial
begin
	register_rs_expected[10] = 1'bX;
end 
// expected register_rs[ 9 ]
initial
begin
	register_rs_expected[9] = 1'bX;
end 
// expected register_rs[ 8 ]
initial
begin
	register_rs_expected[8] = 1'bX;
end 
// expected register_rs[ 7 ]
initial
begin
	register_rs_expected[7] = 1'bX;
end 
// expected register_rs[ 6 ]
initial
begin
	register_rs_expected[6] = 1'bX;
end 
// expected register_rs[ 5 ]
initial
begin
	register_rs_expected[5] = 1'bX;
end 
// expected register_rs[ 4 ]
initial
begin
	register_rs_expected[4] = 1'bX;
end 
// expected register_rs[ 3 ]
initial
begin
	register_rs_expected[3] = 1'bX;
end 
// expected register_rs[ 2 ]
initial
begin
	register_rs_expected[2] = 1'bX;
end 
// expected register_rs[ 1 ]
initial
begin
	register_rs_expected[1] = 1'bX;
end 
// expected register_rs[ 0 ]
initial
begin
	register_rs_expected[0] = 1'bX;
end 
// expected register_rt[ 31 ]
initial
begin
	register_rt_expected[31] = 1'bX;
end 
// expected register_rt[ 30 ]
initial
begin
	register_rt_expected[30] = 1'bX;
end 
// expected register_rt[ 29 ]
initial
begin
	register_rt_expected[29] = 1'bX;
end 
// expected register_rt[ 28 ]
initial
begin
	register_rt_expected[28] = 1'bX;
end 
// expected register_rt[ 27 ]
initial
begin
	register_rt_expected[27] = 1'bX;
end 
// expected register_rt[ 26 ]
initial
begin
	register_rt_expected[26] = 1'bX;
end 
// expected register_rt[ 25 ]
initial
begin
	register_rt_expected[25] = 1'bX;
end 
// expected register_rt[ 24 ]
initial
begin
	register_rt_expected[24] = 1'bX;
end 
// expected register_rt[ 23 ]
initial
begin
	register_rt_expected[23] = 1'bX;
end 
// expected register_rt[ 22 ]
initial
begin
	register_rt_expected[22] = 1'bX;
end 
// expected register_rt[ 21 ]
initial
begin
	register_rt_expected[21] = 1'bX;
end 
// expected register_rt[ 20 ]
initial
begin
	register_rt_expected[20] = 1'bX;
end 
// expected register_rt[ 19 ]
initial
begin
	register_rt_expected[19] = 1'bX;
end 
// expected register_rt[ 18 ]
initial
begin
	register_rt_expected[18] = 1'bX;
end 
// expected register_rt[ 17 ]
initial
begin
	register_rt_expected[17] = 1'bX;
end 
// expected register_rt[ 16 ]
initial
begin
	register_rt_expected[16] = 1'bX;
end 
// expected register_rt[ 15 ]
initial
begin
	register_rt_expected[15] = 1'bX;
end 
// expected register_rt[ 14 ]
initial
begin
	register_rt_expected[14] = 1'bX;
end 
// expected register_rt[ 13 ]
initial
begin
	register_rt_expected[13] = 1'bX;
end 
// expected register_rt[ 12 ]
initial
begin
	register_rt_expected[12] = 1'bX;
end 
// expected register_rt[ 11 ]
initial
begin
	register_rt_expected[11] = 1'bX;
end 
// expected register_rt[ 10 ]
initial
begin
	register_rt_expected[10] = 1'bX;
end 
// expected register_rt[ 9 ]
initial
begin
	register_rt_expected[9] = 1'bX;
end 
// expected register_rt[ 8 ]
initial
begin
	register_rt_expected[8] = 1'bX;
end 
// expected register_rt[ 7 ]
initial
begin
	register_rt_expected[7] = 1'bX;
end 
// expected register_rt[ 6 ]
initial
begin
	register_rt_expected[6] = 1'bX;
end 
// expected register_rt[ 5 ]
initial
begin
	register_rt_expected[5] = 1'bX;
end 
// expected register_rt[ 4 ]
initial
begin
	register_rt_expected[4] = 1'bX;
end 
// expected register_rt[ 3 ]
initial
begin
	register_rt_expected[3] = 1'bX;
end 
// expected register_rt[ 2 ]
initial
begin
	register_rt_expected[2] = 1'bX;
end 
// expected register_rt[ 1 ]
initial
begin
	register_rt_expected[1] = 1'bX;
end 
// expected register_rt[ 0 ]
initial
begin
	register_rt_expected[0] = 1'bX;
end 
// generate trigger
always @(immediate_expected or immediate or jump_addr_expected or jump_addr or register_rd_expected or register_rd or register_rs_expected or register_rs or register_rt_expected or register_rt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected immediate = %b | expected jump_addr = %b | expected register_rd = %b | expected register_rs = %b | expected register_rt = %b | ",immediate_expected_prev,jump_addr_expected_prev,register_rd_expected_prev,register_rs_expected_prev,register_rt_expected_prev);
	$display("| real immediate = %b | real jump_addr = %b | real register_rd = %b | real register_rs = %b | real register_rt = %b | ",immediate_prev,jump_addr_prev,register_rd_prev,register_rs_prev,register_rt_prev);
`endif
	if (
		( jump_addr_expected_prev[0] !== 1'bx ) && ( jump_addr_prev[0] !== jump_addr_expected_prev[0] )
		&& ((jump_addr_expected_prev[0] !== last_jump_addr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[0] = jump_addr_expected_prev[0];
	end
	if (
		( jump_addr_expected_prev[1] !== 1'bx ) && ( jump_addr_prev[1] !== jump_addr_expected_prev[1] )
		&& ((jump_addr_expected_prev[1] !== last_jump_addr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[1] = jump_addr_expected_prev[1];
	end
	if (
		( jump_addr_expected_prev[2] !== 1'bx ) && ( jump_addr_prev[2] !== jump_addr_expected_prev[2] )
		&& ((jump_addr_expected_prev[2] !== last_jump_addr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[2] = jump_addr_expected_prev[2];
	end
	if (
		( jump_addr_expected_prev[3] !== 1'bx ) && ( jump_addr_prev[3] !== jump_addr_expected_prev[3] )
		&& ((jump_addr_expected_prev[3] !== last_jump_addr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[3] = jump_addr_expected_prev[3];
	end
	if (
		( jump_addr_expected_prev[4] !== 1'bx ) && ( jump_addr_prev[4] !== jump_addr_expected_prev[4] )
		&& ((jump_addr_expected_prev[4] !== last_jump_addr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[4] = jump_addr_expected_prev[4];
	end
	if (
		( jump_addr_expected_prev[5] !== 1'bx ) && ( jump_addr_prev[5] !== jump_addr_expected_prev[5] )
		&& ((jump_addr_expected_prev[5] !== last_jump_addr_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[5] = jump_addr_expected_prev[5];
	end
	if (
		( jump_addr_expected_prev[6] !== 1'bx ) && ( jump_addr_prev[6] !== jump_addr_expected_prev[6] )
		&& ((jump_addr_expected_prev[6] !== last_jump_addr_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[6] = jump_addr_expected_prev[6];
	end
	if (
		( jump_addr_expected_prev[7] !== 1'bx ) && ( jump_addr_prev[7] !== jump_addr_expected_prev[7] )
		&& ((jump_addr_expected_prev[7] !== last_jump_addr_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[7] = jump_addr_expected_prev[7];
	end
	if (
		( jump_addr_expected_prev[8] !== 1'bx ) && ( jump_addr_prev[8] !== jump_addr_expected_prev[8] )
		&& ((jump_addr_expected_prev[8] !== last_jump_addr_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[8] = jump_addr_expected_prev[8];
	end
	if (
		( jump_addr_expected_prev[9] !== 1'bx ) && ( jump_addr_prev[9] !== jump_addr_expected_prev[9] )
		&& ((jump_addr_expected_prev[9] !== last_jump_addr_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[9] = jump_addr_expected_prev[9];
	end
	if (
		( jump_addr_expected_prev[10] !== 1'bx ) && ( jump_addr_prev[10] !== jump_addr_expected_prev[10] )
		&& ((jump_addr_expected_prev[10] !== last_jump_addr_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[10] = jump_addr_expected_prev[10];
	end
	if (
		( jump_addr_expected_prev[11] !== 1'bx ) && ( jump_addr_prev[11] !== jump_addr_expected_prev[11] )
		&& ((jump_addr_expected_prev[11] !== last_jump_addr_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[11] = jump_addr_expected_prev[11];
	end
	if (
		( jump_addr_expected_prev[12] !== 1'bx ) && ( jump_addr_prev[12] !== jump_addr_expected_prev[12] )
		&& ((jump_addr_expected_prev[12] !== last_jump_addr_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[12] = jump_addr_expected_prev[12];
	end
	if (
		( jump_addr_expected_prev[13] !== 1'bx ) && ( jump_addr_prev[13] !== jump_addr_expected_prev[13] )
		&& ((jump_addr_expected_prev[13] !== last_jump_addr_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[13] = jump_addr_expected_prev[13];
	end
	if (
		( jump_addr_expected_prev[14] !== 1'bx ) && ( jump_addr_prev[14] !== jump_addr_expected_prev[14] )
		&& ((jump_addr_expected_prev[14] !== last_jump_addr_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[14] = jump_addr_expected_prev[14];
	end
	if (
		( jump_addr_expected_prev[15] !== 1'bx ) && ( jump_addr_prev[15] !== jump_addr_expected_prev[15] )
		&& ((jump_addr_expected_prev[15] !== last_jump_addr_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[15] = jump_addr_expected_prev[15];
	end
	if (
		( jump_addr_expected_prev[16] !== 1'bx ) && ( jump_addr_prev[16] !== jump_addr_expected_prev[16] )
		&& ((jump_addr_expected_prev[16] !== last_jump_addr_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[16] = jump_addr_expected_prev[16];
	end
	if (
		( jump_addr_expected_prev[17] !== 1'bx ) && ( jump_addr_prev[17] !== jump_addr_expected_prev[17] )
		&& ((jump_addr_expected_prev[17] !== last_jump_addr_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[17] = jump_addr_expected_prev[17];
	end
	if (
		( jump_addr_expected_prev[18] !== 1'bx ) && ( jump_addr_prev[18] !== jump_addr_expected_prev[18] )
		&& ((jump_addr_expected_prev[18] !== last_jump_addr_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[18] = jump_addr_expected_prev[18];
	end
	if (
		( jump_addr_expected_prev[19] !== 1'bx ) && ( jump_addr_prev[19] !== jump_addr_expected_prev[19] )
		&& ((jump_addr_expected_prev[19] !== last_jump_addr_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[19] = jump_addr_expected_prev[19];
	end
	if (
		( jump_addr_expected_prev[20] !== 1'bx ) && ( jump_addr_prev[20] !== jump_addr_expected_prev[20] )
		&& ((jump_addr_expected_prev[20] !== last_jump_addr_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[20] = jump_addr_expected_prev[20];
	end
	if (
		( jump_addr_expected_prev[21] !== 1'bx ) && ( jump_addr_prev[21] !== jump_addr_expected_prev[21] )
		&& ((jump_addr_expected_prev[21] !== last_jump_addr_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[21] = jump_addr_expected_prev[21];
	end
	if (
		( jump_addr_expected_prev[22] !== 1'bx ) && ( jump_addr_prev[22] !== jump_addr_expected_prev[22] )
		&& ((jump_addr_expected_prev[22] !== last_jump_addr_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[22] = jump_addr_expected_prev[22];
	end
	if (
		( jump_addr_expected_prev[23] !== 1'bx ) && ( jump_addr_prev[23] !== jump_addr_expected_prev[23] )
		&& ((jump_addr_expected_prev[23] !== last_jump_addr_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[23] = jump_addr_expected_prev[23];
	end
	if (
		( jump_addr_expected_prev[24] !== 1'bx ) && ( jump_addr_prev[24] !== jump_addr_expected_prev[24] )
		&& ((jump_addr_expected_prev[24] !== last_jump_addr_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[24] = jump_addr_expected_prev[24];
	end
	if (
		( jump_addr_expected_prev[25] !== 1'bx ) && ( jump_addr_prev[25] !== jump_addr_expected_prev[25] )
		&& ((jump_addr_expected_prev[25] !== last_jump_addr_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[25] = jump_addr_expected_prev[25];
	end
	if (
		( jump_addr_expected_prev[26] !== 1'bx ) && ( jump_addr_prev[26] !== jump_addr_expected_prev[26] )
		&& ((jump_addr_expected_prev[26] !== last_jump_addr_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[26] = jump_addr_expected_prev[26];
	end
	if (
		( jump_addr_expected_prev[27] !== 1'bx ) && ( jump_addr_prev[27] !== jump_addr_expected_prev[27] )
		&& ((jump_addr_expected_prev[27] !== last_jump_addr_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[27] = jump_addr_expected_prev[27];
	end
	if (
		( jump_addr_expected_prev[28] !== 1'bx ) && ( jump_addr_prev[28] !== jump_addr_expected_prev[28] )
		&& ((jump_addr_expected_prev[28] !== last_jump_addr_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[28] = jump_addr_expected_prev[28];
	end
	if (
		( jump_addr_expected_prev[29] !== 1'bx ) && ( jump_addr_prev[29] !== jump_addr_expected_prev[29] )
		&& ((jump_addr_expected_prev[29] !== last_jump_addr_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[29] = jump_addr_expected_prev[29];
	end
	if (
		( jump_addr_expected_prev[30] !== 1'bx ) && ( jump_addr_prev[30] !== jump_addr_expected_prev[30] )
		&& ((jump_addr_expected_prev[30] !== last_jump_addr_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[30] = jump_addr_expected_prev[30];
	end
	if (
		( jump_addr_expected_prev[31] !== 1'bx ) && ( jump_addr_prev[31] !== jump_addr_expected_prev[31] )
		&& ((jump_addr_expected_prev[31] !== last_jump_addr_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_addr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_addr_expected_prev);
		$display ("     Real value = %b", jump_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_jump_addr_exp[31] = jump_addr_expected_prev[31];
	end
	if (
		( register_rd_expected_prev[0] !== 1'bx ) && ( register_rd_prev[0] !== register_rd_expected_prev[0] )
		&& ((register_rd_expected_prev[0] !== last_register_rd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[0] = register_rd_expected_prev[0];
	end
	if (
		( register_rd_expected_prev[1] !== 1'bx ) && ( register_rd_prev[1] !== register_rd_expected_prev[1] )
		&& ((register_rd_expected_prev[1] !== last_register_rd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[1] = register_rd_expected_prev[1];
	end
	if (
		( register_rd_expected_prev[2] !== 1'bx ) && ( register_rd_prev[2] !== register_rd_expected_prev[2] )
		&& ((register_rd_expected_prev[2] !== last_register_rd_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[2] = register_rd_expected_prev[2];
	end
	if (
		( register_rd_expected_prev[3] !== 1'bx ) && ( register_rd_prev[3] !== register_rd_expected_prev[3] )
		&& ((register_rd_expected_prev[3] !== last_register_rd_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[3] = register_rd_expected_prev[3];
	end
	if (
		( register_rd_expected_prev[4] !== 1'bx ) && ( register_rd_prev[4] !== register_rd_expected_prev[4] )
		&& ((register_rd_expected_prev[4] !== last_register_rd_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[4] = register_rd_expected_prev[4];
	end
	if (
		( register_rd_expected_prev[5] !== 1'bx ) && ( register_rd_prev[5] !== register_rd_expected_prev[5] )
		&& ((register_rd_expected_prev[5] !== last_register_rd_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[5] = register_rd_expected_prev[5];
	end
	if (
		( register_rd_expected_prev[6] !== 1'bx ) && ( register_rd_prev[6] !== register_rd_expected_prev[6] )
		&& ((register_rd_expected_prev[6] !== last_register_rd_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[6] = register_rd_expected_prev[6];
	end
	if (
		( register_rd_expected_prev[7] !== 1'bx ) && ( register_rd_prev[7] !== register_rd_expected_prev[7] )
		&& ((register_rd_expected_prev[7] !== last_register_rd_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[7] = register_rd_expected_prev[7];
	end
	if (
		( register_rd_expected_prev[8] !== 1'bx ) && ( register_rd_prev[8] !== register_rd_expected_prev[8] )
		&& ((register_rd_expected_prev[8] !== last_register_rd_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[8] = register_rd_expected_prev[8];
	end
	if (
		( register_rd_expected_prev[9] !== 1'bx ) && ( register_rd_prev[9] !== register_rd_expected_prev[9] )
		&& ((register_rd_expected_prev[9] !== last_register_rd_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[9] = register_rd_expected_prev[9];
	end
	if (
		( register_rd_expected_prev[10] !== 1'bx ) && ( register_rd_prev[10] !== register_rd_expected_prev[10] )
		&& ((register_rd_expected_prev[10] !== last_register_rd_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[10] = register_rd_expected_prev[10];
	end
	if (
		( register_rd_expected_prev[11] !== 1'bx ) && ( register_rd_prev[11] !== register_rd_expected_prev[11] )
		&& ((register_rd_expected_prev[11] !== last_register_rd_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[11] = register_rd_expected_prev[11];
	end
	if (
		( register_rd_expected_prev[12] !== 1'bx ) && ( register_rd_prev[12] !== register_rd_expected_prev[12] )
		&& ((register_rd_expected_prev[12] !== last_register_rd_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[12] = register_rd_expected_prev[12];
	end
	if (
		( register_rd_expected_prev[13] !== 1'bx ) && ( register_rd_prev[13] !== register_rd_expected_prev[13] )
		&& ((register_rd_expected_prev[13] !== last_register_rd_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[13] = register_rd_expected_prev[13];
	end
	if (
		( register_rd_expected_prev[14] !== 1'bx ) && ( register_rd_prev[14] !== register_rd_expected_prev[14] )
		&& ((register_rd_expected_prev[14] !== last_register_rd_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[14] = register_rd_expected_prev[14];
	end
	if (
		( register_rd_expected_prev[15] !== 1'bx ) && ( register_rd_prev[15] !== register_rd_expected_prev[15] )
		&& ((register_rd_expected_prev[15] !== last_register_rd_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[15] = register_rd_expected_prev[15];
	end
	if (
		( register_rd_expected_prev[16] !== 1'bx ) && ( register_rd_prev[16] !== register_rd_expected_prev[16] )
		&& ((register_rd_expected_prev[16] !== last_register_rd_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[16] = register_rd_expected_prev[16];
	end
	if (
		( register_rd_expected_prev[17] !== 1'bx ) && ( register_rd_prev[17] !== register_rd_expected_prev[17] )
		&& ((register_rd_expected_prev[17] !== last_register_rd_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[17] = register_rd_expected_prev[17];
	end
	if (
		( register_rd_expected_prev[18] !== 1'bx ) && ( register_rd_prev[18] !== register_rd_expected_prev[18] )
		&& ((register_rd_expected_prev[18] !== last_register_rd_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[18] = register_rd_expected_prev[18];
	end
	if (
		( register_rd_expected_prev[19] !== 1'bx ) && ( register_rd_prev[19] !== register_rd_expected_prev[19] )
		&& ((register_rd_expected_prev[19] !== last_register_rd_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[19] = register_rd_expected_prev[19];
	end
	if (
		( register_rd_expected_prev[20] !== 1'bx ) && ( register_rd_prev[20] !== register_rd_expected_prev[20] )
		&& ((register_rd_expected_prev[20] !== last_register_rd_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[20] = register_rd_expected_prev[20];
	end
	if (
		( register_rd_expected_prev[21] !== 1'bx ) && ( register_rd_prev[21] !== register_rd_expected_prev[21] )
		&& ((register_rd_expected_prev[21] !== last_register_rd_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[21] = register_rd_expected_prev[21];
	end
	if (
		( register_rd_expected_prev[22] !== 1'bx ) && ( register_rd_prev[22] !== register_rd_expected_prev[22] )
		&& ((register_rd_expected_prev[22] !== last_register_rd_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[22] = register_rd_expected_prev[22];
	end
	if (
		( register_rd_expected_prev[23] !== 1'bx ) && ( register_rd_prev[23] !== register_rd_expected_prev[23] )
		&& ((register_rd_expected_prev[23] !== last_register_rd_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[23] = register_rd_expected_prev[23];
	end
	if (
		( register_rd_expected_prev[24] !== 1'bx ) && ( register_rd_prev[24] !== register_rd_expected_prev[24] )
		&& ((register_rd_expected_prev[24] !== last_register_rd_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[24] = register_rd_expected_prev[24];
	end
	if (
		( register_rd_expected_prev[25] !== 1'bx ) && ( register_rd_prev[25] !== register_rd_expected_prev[25] )
		&& ((register_rd_expected_prev[25] !== last_register_rd_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[25] = register_rd_expected_prev[25];
	end
	if (
		( register_rd_expected_prev[26] !== 1'bx ) && ( register_rd_prev[26] !== register_rd_expected_prev[26] )
		&& ((register_rd_expected_prev[26] !== last_register_rd_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[26] = register_rd_expected_prev[26];
	end
	if (
		( register_rd_expected_prev[27] !== 1'bx ) && ( register_rd_prev[27] !== register_rd_expected_prev[27] )
		&& ((register_rd_expected_prev[27] !== last_register_rd_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[27] = register_rd_expected_prev[27];
	end
	if (
		( register_rd_expected_prev[28] !== 1'bx ) && ( register_rd_prev[28] !== register_rd_expected_prev[28] )
		&& ((register_rd_expected_prev[28] !== last_register_rd_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[28] = register_rd_expected_prev[28];
	end
	if (
		( register_rd_expected_prev[29] !== 1'bx ) && ( register_rd_prev[29] !== register_rd_expected_prev[29] )
		&& ((register_rd_expected_prev[29] !== last_register_rd_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[29] = register_rd_expected_prev[29];
	end
	if (
		( register_rd_expected_prev[30] !== 1'bx ) && ( register_rd_prev[30] !== register_rd_expected_prev[30] )
		&& ((register_rd_expected_prev[30] !== last_register_rd_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[30] = register_rd_expected_prev[30];
	end
	if (
		( register_rd_expected_prev[31] !== 1'bx ) && ( register_rd_prev[31] !== register_rd_expected_prev[31] )
		&& ((register_rd_expected_prev[31] !== last_register_rd_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rd_expected_prev);
		$display ("     Real value = %b", register_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_register_rd_exp[31] = register_rd_expected_prev[31];
	end
	if (
		( register_rs_expected_prev[0] !== 1'bx ) && ( register_rs_prev[0] !== register_rs_expected_prev[0] )
		&& ((register_rs_expected_prev[0] !== last_register_rs_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[0] = register_rs_expected_prev[0];
	end
	if (
		( register_rs_expected_prev[1] !== 1'bx ) && ( register_rs_prev[1] !== register_rs_expected_prev[1] )
		&& ((register_rs_expected_prev[1] !== last_register_rs_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[1] = register_rs_expected_prev[1];
	end
	if (
		( register_rs_expected_prev[2] !== 1'bx ) && ( register_rs_prev[2] !== register_rs_expected_prev[2] )
		&& ((register_rs_expected_prev[2] !== last_register_rs_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[2] = register_rs_expected_prev[2];
	end
	if (
		( register_rs_expected_prev[3] !== 1'bx ) && ( register_rs_prev[3] !== register_rs_expected_prev[3] )
		&& ((register_rs_expected_prev[3] !== last_register_rs_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[3] = register_rs_expected_prev[3];
	end
	if (
		( register_rs_expected_prev[4] !== 1'bx ) && ( register_rs_prev[4] !== register_rs_expected_prev[4] )
		&& ((register_rs_expected_prev[4] !== last_register_rs_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[4] = register_rs_expected_prev[4];
	end
	if (
		( register_rs_expected_prev[5] !== 1'bx ) && ( register_rs_prev[5] !== register_rs_expected_prev[5] )
		&& ((register_rs_expected_prev[5] !== last_register_rs_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[5] = register_rs_expected_prev[5];
	end
	if (
		( register_rs_expected_prev[6] !== 1'bx ) && ( register_rs_prev[6] !== register_rs_expected_prev[6] )
		&& ((register_rs_expected_prev[6] !== last_register_rs_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[6] = register_rs_expected_prev[6];
	end
	if (
		( register_rs_expected_prev[7] !== 1'bx ) && ( register_rs_prev[7] !== register_rs_expected_prev[7] )
		&& ((register_rs_expected_prev[7] !== last_register_rs_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[7] = register_rs_expected_prev[7];
	end
	if (
		( register_rs_expected_prev[8] !== 1'bx ) && ( register_rs_prev[8] !== register_rs_expected_prev[8] )
		&& ((register_rs_expected_prev[8] !== last_register_rs_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[8] = register_rs_expected_prev[8];
	end
	if (
		( register_rs_expected_prev[9] !== 1'bx ) && ( register_rs_prev[9] !== register_rs_expected_prev[9] )
		&& ((register_rs_expected_prev[9] !== last_register_rs_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[9] = register_rs_expected_prev[9];
	end
	if (
		( register_rs_expected_prev[10] !== 1'bx ) && ( register_rs_prev[10] !== register_rs_expected_prev[10] )
		&& ((register_rs_expected_prev[10] !== last_register_rs_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[10] = register_rs_expected_prev[10];
	end
	if (
		( register_rs_expected_prev[11] !== 1'bx ) && ( register_rs_prev[11] !== register_rs_expected_prev[11] )
		&& ((register_rs_expected_prev[11] !== last_register_rs_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[11] = register_rs_expected_prev[11];
	end
	if (
		( register_rs_expected_prev[12] !== 1'bx ) && ( register_rs_prev[12] !== register_rs_expected_prev[12] )
		&& ((register_rs_expected_prev[12] !== last_register_rs_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[12] = register_rs_expected_prev[12];
	end
	if (
		( register_rs_expected_prev[13] !== 1'bx ) && ( register_rs_prev[13] !== register_rs_expected_prev[13] )
		&& ((register_rs_expected_prev[13] !== last_register_rs_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[13] = register_rs_expected_prev[13];
	end
	if (
		( register_rs_expected_prev[14] !== 1'bx ) && ( register_rs_prev[14] !== register_rs_expected_prev[14] )
		&& ((register_rs_expected_prev[14] !== last_register_rs_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[14] = register_rs_expected_prev[14];
	end
	if (
		( register_rs_expected_prev[15] !== 1'bx ) && ( register_rs_prev[15] !== register_rs_expected_prev[15] )
		&& ((register_rs_expected_prev[15] !== last_register_rs_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[15] = register_rs_expected_prev[15];
	end
	if (
		( register_rs_expected_prev[16] !== 1'bx ) && ( register_rs_prev[16] !== register_rs_expected_prev[16] )
		&& ((register_rs_expected_prev[16] !== last_register_rs_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[16] = register_rs_expected_prev[16];
	end
	if (
		( register_rs_expected_prev[17] !== 1'bx ) && ( register_rs_prev[17] !== register_rs_expected_prev[17] )
		&& ((register_rs_expected_prev[17] !== last_register_rs_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[17] = register_rs_expected_prev[17];
	end
	if (
		( register_rs_expected_prev[18] !== 1'bx ) && ( register_rs_prev[18] !== register_rs_expected_prev[18] )
		&& ((register_rs_expected_prev[18] !== last_register_rs_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[18] = register_rs_expected_prev[18];
	end
	if (
		( register_rs_expected_prev[19] !== 1'bx ) && ( register_rs_prev[19] !== register_rs_expected_prev[19] )
		&& ((register_rs_expected_prev[19] !== last_register_rs_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[19] = register_rs_expected_prev[19];
	end
	if (
		( register_rs_expected_prev[20] !== 1'bx ) && ( register_rs_prev[20] !== register_rs_expected_prev[20] )
		&& ((register_rs_expected_prev[20] !== last_register_rs_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[20] = register_rs_expected_prev[20];
	end
	if (
		( register_rs_expected_prev[21] !== 1'bx ) && ( register_rs_prev[21] !== register_rs_expected_prev[21] )
		&& ((register_rs_expected_prev[21] !== last_register_rs_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[21] = register_rs_expected_prev[21];
	end
	if (
		( register_rs_expected_prev[22] !== 1'bx ) && ( register_rs_prev[22] !== register_rs_expected_prev[22] )
		&& ((register_rs_expected_prev[22] !== last_register_rs_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[22] = register_rs_expected_prev[22];
	end
	if (
		( register_rs_expected_prev[23] !== 1'bx ) && ( register_rs_prev[23] !== register_rs_expected_prev[23] )
		&& ((register_rs_expected_prev[23] !== last_register_rs_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[23] = register_rs_expected_prev[23];
	end
	if (
		( register_rs_expected_prev[24] !== 1'bx ) && ( register_rs_prev[24] !== register_rs_expected_prev[24] )
		&& ((register_rs_expected_prev[24] !== last_register_rs_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[24] = register_rs_expected_prev[24];
	end
	if (
		( register_rs_expected_prev[25] !== 1'bx ) && ( register_rs_prev[25] !== register_rs_expected_prev[25] )
		&& ((register_rs_expected_prev[25] !== last_register_rs_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[25] = register_rs_expected_prev[25];
	end
	if (
		( register_rs_expected_prev[26] !== 1'bx ) && ( register_rs_prev[26] !== register_rs_expected_prev[26] )
		&& ((register_rs_expected_prev[26] !== last_register_rs_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[26] = register_rs_expected_prev[26];
	end
	if (
		( register_rs_expected_prev[27] !== 1'bx ) && ( register_rs_prev[27] !== register_rs_expected_prev[27] )
		&& ((register_rs_expected_prev[27] !== last_register_rs_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[27] = register_rs_expected_prev[27];
	end
	if (
		( register_rs_expected_prev[28] !== 1'bx ) && ( register_rs_prev[28] !== register_rs_expected_prev[28] )
		&& ((register_rs_expected_prev[28] !== last_register_rs_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[28] = register_rs_expected_prev[28];
	end
	if (
		( register_rs_expected_prev[29] !== 1'bx ) && ( register_rs_prev[29] !== register_rs_expected_prev[29] )
		&& ((register_rs_expected_prev[29] !== last_register_rs_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[29] = register_rs_expected_prev[29];
	end
	if (
		( register_rs_expected_prev[30] !== 1'bx ) && ( register_rs_prev[30] !== register_rs_expected_prev[30] )
		&& ((register_rs_expected_prev[30] !== last_register_rs_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[30] = register_rs_expected_prev[30];
	end
	if (
		( register_rs_expected_prev[31] !== 1'bx ) && ( register_rs_prev[31] !== register_rs_expected_prev[31] )
		&& ((register_rs_expected_prev[31] !== last_register_rs_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rs[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rs_expected_prev);
		$display ("     Real value = %b", register_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_register_rs_exp[31] = register_rs_expected_prev[31];
	end
	if (
		( register_rt_expected_prev[0] !== 1'bx ) && ( register_rt_prev[0] !== register_rt_expected_prev[0] )
		&& ((register_rt_expected_prev[0] !== last_register_rt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[0] = register_rt_expected_prev[0];
	end
	if (
		( register_rt_expected_prev[1] !== 1'bx ) && ( register_rt_prev[1] !== register_rt_expected_prev[1] )
		&& ((register_rt_expected_prev[1] !== last_register_rt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[1] = register_rt_expected_prev[1];
	end
	if (
		( register_rt_expected_prev[2] !== 1'bx ) && ( register_rt_prev[2] !== register_rt_expected_prev[2] )
		&& ((register_rt_expected_prev[2] !== last_register_rt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[2] = register_rt_expected_prev[2];
	end
	if (
		( register_rt_expected_prev[3] !== 1'bx ) && ( register_rt_prev[3] !== register_rt_expected_prev[3] )
		&& ((register_rt_expected_prev[3] !== last_register_rt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[3] = register_rt_expected_prev[3];
	end
	if (
		( register_rt_expected_prev[4] !== 1'bx ) && ( register_rt_prev[4] !== register_rt_expected_prev[4] )
		&& ((register_rt_expected_prev[4] !== last_register_rt_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[4] = register_rt_expected_prev[4];
	end
	if (
		( register_rt_expected_prev[5] !== 1'bx ) && ( register_rt_prev[5] !== register_rt_expected_prev[5] )
		&& ((register_rt_expected_prev[5] !== last_register_rt_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[5] = register_rt_expected_prev[5];
	end
	if (
		( register_rt_expected_prev[6] !== 1'bx ) && ( register_rt_prev[6] !== register_rt_expected_prev[6] )
		&& ((register_rt_expected_prev[6] !== last_register_rt_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[6] = register_rt_expected_prev[6];
	end
	if (
		( register_rt_expected_prev[7] !== 1'bx ) && ( register_rt_prev[7] !== register_rt_expected_prev[7] )
		&& ((register_rt_expected_prev[7] !== last_register_rt_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[7] = register_rt_expected_prev[7];
	end
	if (
		( register_rt_expected_prev[8] !== 1'bx ) && ( register_rt_prev[8] !== register_rt_expected_prev[8] )
		&& ((register_rt_expected_prev[8] !== last_register_rt_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[8] = register_rt_expected_prev[8];
	end
	if (
		( register_rt_expected_prev[9] !== 1'bx ) && ( register_rt_prev[9] !== register_rt_expected_prev[9] )
		&& ((register_rt_expected_prev[9] !== last_register_rt_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[9] = register_rt_expected_prev[9];
	end
	if (
		( register_rt_expected_prev[10] !== 1'bx ) && ( register_rt_prev[10] !== register_rt_expected_prev[10] )
		&& ((register_rt_expected_prev[10] !== last_register_rt_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[10] = register_rt_expected_prev[10];
	end
	if (
		( register_rt_expected_prev[11] !== 1'bx ) && ( register_rt_prev[11] !== register_rt_expected_prev[11] )
		&& ((register_rt_expected_prev[11] !== last_register_rt_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[11] = register_rt_expected_prev[11];
	end
	if (
		( register_rt_expected_prev[12] !== 1'bx ) && ( register_rt_prev[12] !== register_rt_expected_prev[12] )
		&& ((register_rt_expected_prev[12] !== last_register_rt_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[12] = register_rt_expected_prev[12];
	end
	if (
		( register_rt_expected_prev[13] !== 1'bx ) && ( register_rt_prev[13] !== register_rt_expected_prev[13] )
		&& ((register_rt_expected_prev[13] !== last_register_rt_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[13] = register_rt_expected_prev[13];
	end
	if (
		( register_rt_expected_prev[14] !== 1'bx ) && ( register_rt_prev[14] !== register_rt_expected_prev[14] )
		&& ((register_rt_expected_prev[14] !== last_register_rt_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[14] = register_rt_expected_prev[14];
	end
	if (
		( register_rt_expected_prev[15] !== 1'bx ) && ( register_rt_prev[15] !== register_rt_expected_prev[15] )
		&& ((register_rt_expected_prev[15] !== last_register_rt_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[15] = register_rt_expected_prev[15];
	end
	if (
		( register_rt_expected_prev[16] !== 1'bx ) && ( register_rt_prev[16] !== register_rt_expected_prev[16] )
		&& ((register_rt_expected_prev[16] !== last_register_rt_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[16] = register_rt_expected_prev[16];
	end
	if (
		( register_rt_expected_prev[17] !== 1'bx ) && ( register_rt_prev[17] !== register_rt_expected_prev[17] )
		&& ((register_rt_expected_prev[17] !== last_register_rt_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[17] = register_rt_expected_prev[17];
	end
	if (
		( register_rt_expected_prev[18] !== 1'bx ) && ( register_rt_prev[18] !== register_rt_expected_prev[18] )
		&& ((register_rt_expected_prev[18] !== last_register_rt_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[18] = register_rt_expected_prev[18];
	end
	if (
		( register_rt_expected_prev[19] !== 1'bx ) && ( register_rt_prev[19] !== register_rt_expected_prev[19] )
		&& ((register_rt_expected_prev[19] !== last_register_rt_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[19] = register_rt_expected_prev[19];
	end
	if (
		( register_rt_expected_prev[20] !== 1'bx ) && ( register_rt_prev[20] !== register_rt_expected_prev[20] )
		&& ((register_rt_expected_prev[20] !== last_register_rt_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[20] = register_rt_expected_prev[20];
	end
	if (
		( register_rt_expected_prev[21] !== 1'bx ) && ( register_rt_prev[21] !== register_rt_expected_prev[21] )
		&& ((register_rt_expected_prev[21] !== last_register_rt_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[21] = register_rt_expected_prev[21];
	end
	if (
		( register_rt_expected_prev[22] !== 1'bx ) && ( register_rt_prev[22] !== register_rt_expected_prev[22] )
		&& ((register_rt_expected_prev[22] !== last_register_rt_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[22] = register_rt_expected_prev[22];
	end
	if (
		( register_rt_expected_prev[23] !== 1'bx ) && ( register_rt_prev[23] !== register_rt_expected_prev[23] )
		&& ((register_rt_expected_prev[23] !== last_register_rt_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[23] = register_rt_expected_prev[23];
	end
	if (
		( register_rt_expected_prev[24] !== 1'bx ) && ( register_rt_prev[24] !== register_rt_expected_prev[24] )
		&& ((register_rt_expected_prev[24] !== last_register_rt_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[24] = register_rt_expected_prev[24];
	end
	if (
		( register_rt_expected_prev[25] !== 1'bx ) && ( register_rt_prev[25] !== register_rt_expected_prev[25] )
		&& ((register_rt_expected_prev[25] !== last_register_rt_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[25] = register_rt_expected_prev[25];
	end
	if (
		( register_rt_expected_prev[26] !== 1'bx ) && ( register_rt_prev[26] !== register_rt_expected_prev[26] )
		&& ((register_rt_expected_prev[26] !== last_register_rt_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[26] = register_rt_expected_prev[26];
	end
	if (
		( register_rt_expected_prev[27] !== 1'bx ) && ( register_rt_prev[27] !== register_rt_expected_prev[27] )
		&& ((register_rt_expected_prev[27] !== last_register_rt_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[27] = register_rt_expected_prev[27];
	end
	if (
		( register_rt_expected_prev[28] !== 1'bx ) && ( register_rt_prev[28] !== register_rt_expected_prev[28] )
		&& ((register_rt_expected_prev[28] !== last_register_rt_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[28] = register_rt_expected_prev[28];
	end
	if (
		( register_rt_expected_prev[29] !== 1'bx ) && ( register_rt_prev[29] !== register_rt_expected_prev[29] )
		&& ((register_rt_expected_prev[29] !== last_register_rt_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[29] = register_rt_expected_prev[29];
	end
	if (
		( register_rt_expected_prev[30] !== 1'bx ) && ( register_rt_prev[30] !== register_rt_expected_prev[30] )
		&& ((register_rt_expected_prev[30] !== last_register_rt_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[30] = register_rt_expected_prev[30];
	end
	if (
		( register_rt_expected_prev[31] !== 1'bx ) && ( register_rt_prev[31] !== register_rt_expected_prev[31] )
		&& ((register_rt_expected_prev[31] !== last_register_rt_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_rt[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_rt_expected_prev);
		$display ("     Real value = %b", register_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_register_rt_exp[31] = register_rt_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decodeModule_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] alu_result;
reg clock;
reg [31:0] instruction;
reg [31:0] memory_data;
reg MemToReg;
reg RegDst;
reg RegWrite;
reg reset;
// wires                                               
wire [31:0] immediate;
wire [31:0] jump_addr;
wire [31:0] register_rd;
wire [31:0] register_rs;
wire [31:0] register_rt;

wire sampler;                             

// assign statements (if any)                          
decodeModule i1 (
// port map - connection between master ports and signals/registers   
	.alu_result(alu_result),
	.clock(clock),
	.immediate(immediate),
	.instruction(instruction),
	.jump_addr(jump_addr),
	.memory_data(memory_data),
	.MemToReg(MemToReg),
	.RegDst(RegDst),
	.register_rd(register_rd),
	.register_rs(register_rs),
	.register_rt(register_rt),
	.RegWrite(RegWrite),
	.reset(reset)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// RegWrite
initial
begin
	RegWrite = 1'b0;
	RegWrite = #30000 1'b1;
	RegWrite = #110000 1'b0;
end 

// RegDst
initial
begin
	RegDst = 1'b0;
end 

// MemToReg
initial
begin
	MemToReg = 1'b0;
	MemToReg = #40000 1'b1;
	MemToReg = #100000 1'b0;
end 
// alu_result[ 31 ]
initial
begin
	alu_result[31] = 1'b0;
end 
// alu_result[ 30 ]
initial
begin
	alu_result[30] = 1'b0;
end 
// alu_result[ 29 ]
initial
begin
	alu_result[29] = 1'b0;
end 
// alu_result[ 28 ]
initial
begin
	alu_result[28] = 1'b0;
end 
// alu_result[ 27 ]
initial
begin
	alu_result[27] = 1'b0;
end 
// alu_result[ 26 ]
initial
begin
	alu_result[26] = 1'b0;
end 
// alu_result[ 25 ]
initial
begin
	alu_result[25] = 1'b0;
end 
// alu_result[ 24 ]
initial
begin
	alu_result[24] = 1'b0;
end 
// alu_result[ 23 ]
initial
begin
	alu_result[23] = 1'b0;
end 
// alu_result[ 22 ]
initial
begin
	alu_result[22] = 1'b0;
end 
// alu_result[ 21 ]
initial
begin
	alu_result[21] = 1'b0;
end 
// alu_result[ 20 ]
initial
begin
	alu_result[20] = 1'b0;
end 
// alu_result[ 19 ]
initial
begin
	alu_result[19] = 1'b0;
end 
// alu_result[ 18 ]
initial
begin
	alu_result[18] = 1'b0;
end 
// alu_result[ 17 ]
initial
begin
	alu_result[17] = 1'b0;
end 
// alu_result[ 16 ]
initial
begin
	alu_result[16] = 1'b0;
end 
// alu_result[ 15 ]
initial
begin
	alu_result[15] = 1'b0;
end 
// alu_result[ 14 ]
initial
begin
	alu_result[14] = 1'b0;
end 
// alu_result[ 13 ]
initial
begin
	alu_result[13] = 1'b0;
end 
// alu_result[ 12 ]
initial
begin
	alu_result[12] = 1'b0;
end 
// alu_result[ 11 ]
initial
begin
	alu_result[11] = 1'b0;
end 
// alu_result[ 10 ]
initial
begin
	alu_result[10] = 1'b0;
end 
// alu_result[ 9 ]
initial
begin
	alu_result[9] = 1'b0;
end 
// alu_result[ 8 ]
initial
begin
	alu_result[8] = 1'b0;
end 
// alu_result[ 7 ]
initial
begin
	alu_result[7] = 1'b0;
end 
// alu_result[ 6 ]
initial
begin
	alu_result[6] = 1'b0;
end 
// alu_result[ 5 ]
initial
begin
	alu_result[5] = 1'b0;
end 
// alu_result[ 4 ]
initial
begin
	alu_result[4] = 1'b0;
end 
// alu_result[ 3 ]
initial
begin
	alu_result[3] = 1'b0;
end 
// alu_result[ 2 ]
initial
begin
	alu_result[2] = 1'b0;
	alu_result[2] = #10000 1'b1;
	alu_result[2] = #390000 1'b0;
end 
// alu_result[ 1 ]
initial
begin
	alu_result[1] = 1'b0;
end 
// alu_result[ 0 ]
initial
begin
	alu_result[0] = 1'b0;
end 
// memory_data[ 31 ]
initial
begin
	memory_data[31] = 1'b0;
end 
// memory_data[ 30 ]
initial
begin
	memory_data[30] = 1'b0;
end 
// memory_data[ 29 ]
initial
begin
	memory_data[29] = 1'b0;
end 
// memory_data[ 28 ]
initial
begin
	memory_data[28] = 1'b0;
end 
// memory_data[ 27 ]
initial
begin
	memory_data[27] = 1'b0;
end 
// memory_data[ 26 ]
initial
begin
	memory_data[26] = 1'b0;
end 
// memory_data[ 25 ]
initial
begin
	memory_data[25] = 1'b0;
end 
// memory_data[ 24 ]
initial
begin
	memory_data[24] = 1'b0;
end 
// memory_data[ 23 ]
initial
begin
	memory_data[23] = 1'b0;
end 
// memory_data[ 22 ]
initial
begin
	memory_data[22] = 1'b0;
end 
// memory_data[ 21 ]
initial
begin
	memory_data[21] = 1'b0;
end 
// memory_data[ 20 ]
initial
begin
	memory_data[20] = 1'b0;
end 
// memory_data[ 19 ]
initial
begin
	memory_data[19] = 1'b0;
end 
// memory_data[ 18 ]
initial
begin
	memory_data[18] = 1'b0;
end 
// memory_data[ 17 ]
initial
begin
	memory_data[17] = 1'b0;
end 
// memory_data[ 16 ]
initial
begin
	memory_data[16] = 1'b0;
end 
// memory_data[ 15 ]
initial
begin
	memory_data[15] = 1'b0;
end 
// memory_data[ 14 ]
initial
begin
	memory_data[14] = 1'b0;
end 
// memory_data[ 13 ]
initial
begin
	memory_data[13] = 1'b0;
end 
// memory_data[ 12 ]
initial
begin
	memory_data[12] = 1'b0;
end 
// memory_data[ 11 ]
initial
begin
	memory_data[11] = 1'b0;
end 
// memory_data[ 10 ]
initial
begin
	memory_data[10] = 1'b0;
end 
// memory_data[ 9 ]
initial
begin
	memory_data[9] = 1'b0;
end 
// memory_data[ 8 ]
initial
begin
	memory_data[8] = 1'b0;
end 
// memory_data[ 7 ]
initial
begin
	memory_data[7] = 1'b0;
end 
// memory_data[ 6 ]
initial
begin
	memory_data[6] = 1'b0;
end 
// memory_data[ 5 ]
initial
begin
	memory_data[5] = 1'b0;
end 
// memory_data[ 4 ]
initial
begin
	memory_data[4] = 1'b0;
end 
// memory_data[ 3 ]
initial
begin
	memory_data[3] = 1'b0;
	memory_data[3] = #10000 1'b1;
	memory_data[3] = #390000 1'b0;
end 
// memory_data[ 2 ]
initial
begin
	memory_data[2] = 1'b0;
end 
// memory_data[ 1 ]
initial
begin
	memory_data[1] = 1'b0;
	memory_data[1] = #10000 1'b1;
	memory_data[1] = #390000 1'b0;
end 
// memory_data[ 0 ]
initial
begin
	memory_data[0] = 1'b0;
end 
// instruction[ 31 ]
initial
begin
	instruction[31] = 1'b0;
end 
// instruction[ 30 ]
initial
begin
	instruction[30] = 1'b0;
end 
// instruction[ 29 ]
initial
begin
	instruction[29] = 1'b0;
	instruction[29] = #10000 1'b1;
	instruction[29] = #400000 1'b0;
end 
// instruction[ 28 ]
initial
begin
	instruction[28] = 1'b0;
end 
// instruction[ 27 ]
initial
begin
	instruction[27] = 1'b0;
end 
// instruction[ 26 ]
initial
begin
	instruction[26] = 1'b0;
end 
// instruction[ 25 ]
initial
begin
	instruction[25] = 1'b0;
end 
// instruction[ 24 ]
initial
begin
	instruction[24] = 1'b0;
	instruction[24] = #10000 1'b1;
	instruction[24] = #400000 1'b0;
end 
// instruction[ 23 ]
initial
begin
	instruction[23] = 1'b0;
end 
// instruction[ 22 ]
initial
begin
	instruction[22] = 1'b0;
end 
// instruction[ 21 ]
initial
begin
	instruction[21] = 1'b0;
end 
// instruction[ 20 ]
initial
begin
	instruction[20] = 1'b0;
end 
// instruction[ 19 ]
initial
begin
	instruction[19] = 1'b0;
	instruction[19] = #10000 1'b1;
	instruction[19] = #400000 1'b0;
end 
// instruction[ 18 ]
initial
begin
	instruction[18] = 1'b0;
end 
// instruction[ 17 ]
initial
begin
	instruction[17] = 1'b0;
end 
// instruction[ 16 ]
initial
begin
	instruction[16] = 1'b0;
	instruction[16] = #10000 1'b1;
	instruction[16] = #400000 1'b0;
end 
// instruction[ 15 ]
initial
begin
	instruction[15] = 1'b0;
end 
// instruction[ 14 ]
initial
begin
	instruction[14] = 1'b0;
end 
// instruction[ 13 ]
initial
begin
	instruction[13] = 1'b0;
end 
// instruction[ 12 ]
initial
begin
	instruction[12] = 1'b0;
end 
// instruction[ 11 ]
initial
begin
	instruction[11] = 1'b0;
end 
// instruction[ 10 ]
initial
begin
	instruction[10] = 1'b0;
end 
// instruction[ 9 ]
initial
begin
	instruction[9] = 1'b0;
end 
// instruction[ 8 ]
initial
begin
	instruction[8] = 1'b0;
end 
// instruction[ 7 ]
initial
begin
	instruction[7] = 1'b0;
end 
// instruction[ 6 ]
initial
begin
	instruction[6] = 1'b0;
end 
// instruction[ 5 ]
initial
begin
	instruction[5] = 1'b0;
end 
// instruction[ 4 ]
initial
begin
	instruction[4] = 1'b0;
end 
// instruction[ 3 ]
initial
begin
	instruction[3] = 1'b0;
	instruction[3] = #10000 1'b1;
	instruction[3] = #400000 1'b0;
end 
// instruction[ 2 ]
initial
begin
	instruction[2] = 1'b0;
end 
// instruction[ 1 ]
initial
begin
	instruction[1] = 1'b0;
	instruction[1] = #10000 1'b1;
	instruction[1] = #400000 1'b0;
end 
// instruction[ 0 ]
initial
begin
	instruction[0] = 1'b0;
end 

decodeModule_vlg_sample_tst tb_sample (
	.alu_result(alu_result),
	.clock(clock),
	.instruction(instruction),
	.memory_data(memory_data),
	.MemToReg(MemToReg),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.reset(reset),
	.sampler_tx(sampler)
);

decodeModule_vlg_check_tst tb_out(
	.immediate(immediate),
	.jump_addr(jump_addr),
	.register_rd(register_rd),
	.register_rs(register_rs),
	.register_rt(register_rt),
	.sampler_rx(sampler)
);
endmodule

